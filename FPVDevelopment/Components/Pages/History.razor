@page "/History"
@using FPVDevelopment.Components.Data.Classes
@using FPVDevelopment.Components.Data.Models
@using FPVDevelopment.Components.Globals
@inject CurrentUser CurrentUser
@inject CompletedRunService CompletedRunService
@inject DroneService DroneService
@inject MapService MapService
@rendermode InteractiveServer

<MudText Typo="Typo.h4" GutterBottom="true" Class="pt-6 px-4">Run History</MudText>

<div style="max-height: calc(100vh - 150px); overflow-y: auto; padding: 0 16px;">
    <MudGrid Spacing="2" Direction="Column">
        @foreach (var run in _completedRunList.OrderByDescending(r => r.Date))
        {
            <MudItem xs="12">
                <MudCard Style="width: 100%;">
                    <MudCardContent>
                        <MudText Typo="Typo.h6" GutterBottom="true">@run.Course.Name (@run.Course.Difficulty)</MudText>
                        <MudText>Drone: @run.Drone.Name (@Enums.GetEnumDescription(@run.Drone.Size))</MudText>
                        <MudText>Date: @run.Date.ToShortDateString()</MudText>
                        <MudText>
                            Time: @(run.Time.HasValue
                                      ? run.Time.Value.ToString(@"mm\:ss\.fff")
                                      : "N/A")
                        </MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</div>


@code{
    private IList<Map> _mapList = [];
    private IList<Drone> _droneList = [];
    private IList<CompletedRun> _completedRunList = [];

    protected override async Task OnInitializedAsync()
    {
        _mapList = await  MapService.GetMaps();
        _droneList = await DroneService.GetDrones(CurrentUser.User);
        _completedRunList = await CompletedRunService.GetCompletedRuns(CurrentUser.User);
        CurrentUser.CurrentUserChangedEvent += OnCurrentUserChanged;
    }

    private void OnCurrentUserChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CurrentUser.CurrentUserChangedEvent -= OnCurrentUserChanged;
    }
}