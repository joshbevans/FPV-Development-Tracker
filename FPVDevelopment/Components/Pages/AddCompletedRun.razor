@page "/AddCompletedRun"
@using FPVDevelopment.Components.Data.Classes
@using FPVDevelopment.Components.Data.Models
@using FPVDevelopment.Components.Globals
@using static FPVDevelopment.Components.Globals.Enums
@inject CompletedRunService completedRunService;
@inject MapService mapService;
@inject DroneService droneService;
@inject CurrentUser currentUser;
@rendermode InteractiveServer

<h1>Add a new map to the database.</h1>

<EditForm FormName="AddCompletedRunForm" Model="@completedRun" OnSubmit="HandleSubmit">
    <label for="MapInput">Select Map: </label>
    <InputSelect id="MapInput" @bind-Value="@completedRun.Map">
        @foreach (Map map in mapList)
        {
            string displayTag = $"{map.Name} ({map.Difficulty})";
            <option value="@map.Name">@displayTag</option>
        }
    </InputSelect>
    <br /><br />

    <label for="DroneInput">Select Drone: </label>
    <InputSelect id="DroneInput" @bind-Value="@completedRun.Drone">
        @foreach (Drone drone in droneList)
        {
            string displayTag = $"{drone.Name} ({Enums.GetEnumDescription(drone.Size)})";
            <option value="@drone.Name">@displayTag</option>
        }
    </InputSelect>
    <br /><br />

    <button type="submit" class="btn-primary" disabled="@_isSubmitDisabled">Add Map</button>
</EditForm>

@code {
    List<Map> mapList = new List<Map>();
    List<Drone> droneList = new List<Drone>();

    protected override async Task OnInitializedAsync()
    {
        mapList = await mapService.GetMaps();
        droneList = await droneService.GetDrones();
        currentUser.CurrentUserChangedEvent += OnCurrentUserChanged;
    }

    private void OnCurrentUserChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        currentUser.CurrentUserChangedEvent -= OnCurrentUserChanged;
    }

    CompletedRun completedRun = new CompletedRun();

    private bool _isSubmitDisabled =>
        completedRun.Drone is null ||
        completedRun.Map is null;

    public void HandleSubmit(EditContext editContext)
    {
        CompletedRun newCompletedRun = (CompletedRun)editContext.Model;
        completedRunService.AddCompletedRun(newCompletedRun, currentUser.User);
    }
}