@page "/AddCompletedRun"
@using FPVDevelopment.Components.Data.Classes
@using FPVDevelopment.Components.Data.Models
@using FPVDevelopment.Components.Globals
@using Microsoft.EntityFrameworkCore
@using static FPVDevelopment.Components.Globals.Enums
@inject CompletedRunService CompletedRunService;
@inject MapService MapService;
@inject DroneService DroneService;
@inject CurrentUser CurrentUser;
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<h1>Add a completed run to the database.</h1>

<EditForm FormName="AddCompletedRunForm" Model="@_completedRun" OnSubmit="HandleSubmit">
    <label for="MapInput">Select Map: </label>
    <InputSelect id="MapInput" @bind-Value="_completedRun.MapID">
        <option value="">-- Select a Map --</option>
        @foreach (var map in _mapList)
        {
            string displayTag = $"{map.Name} ({map.Difficulty})";
            <option value="@map.ID">@displayTag</option>
        }
    </InputSelect>
    <br /><br />

    <label for="DroneInput">Select Drone: </label>
    <InputSelect id="DroneInput" @bind-Value="_completedRun.DroneID">
        <option value="">-- Select a Drone --</option>
        @foreach (var drone in _droneList)
        {
            string displayTag = $"{drone.Name} ({Enums.GetEnumDescription(drone.Size)})";
            <option value="@drone.ID">@displayTag</option>
        }
    </InputSelect>
    <br /><br />

    <label>Input Time: </label>
    <input type="number" @bind="_minutes">
    <input type="number" @bind="_seconds">
    <input type="number" @bind="_milliseconds">
    <br /><br />

    <button type="submit" class="btn-outline-primary" disabled="@IsSubmitDisabled">Add Completed Run</button>
</EditForm>

@code {
    private readonly CompletedRun _completedRun = new CompletedRun();
    private IList<Map> _mapList = [];
    private IList<Drone> _droneList = [];
    private int _minutes;
    private int _seconds;
    private int _milliseconds;
    private TimeSpan CreateTimeSpan() => new TimeSpan(0, 0, _minutes, _seconds, _milliseconds);

    protected override async Task OnInitializedAsync()
    {
        _mapList = await  MapService.GetMaps();
        _droneList = await DroneService.GetDrones(CurrentUser.User);
        CurrentUser.CurrentUserChangedEvent += OnCurrentUserChanged;
    }

    private void OnCurrentUserChanged(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        CurrentUser.CurrentUserChangedEvent -= OnCurrentUserChanged;
    }

    private bool IsSubmitDisabled =>
        _completedRun.MapID is 0 ||
        _completedRun.DroneID is 0 ||
        string.IsNullOrWhiteSpace(_minutes.ToString()) ||
        string.IsNullOrWhiteSpace(_seconds.ToString()) ||
        string.IsNullOrWhiteSpace(_milliseconds.ToString());


    public async Task HandleSubmit(EditContext editContext)
    {
        CompletedRun newCompletedRun = (CompletedRun)editContext.Model;
        newCompletedRun.Time = CreateTimeSpan(); 
        await CompletedRunService.AddCompletedRun(newCompletedRun, CurrentUser.User);
        Snackbar.Add("Completed Run Added!", Severity.Success);
    }
}